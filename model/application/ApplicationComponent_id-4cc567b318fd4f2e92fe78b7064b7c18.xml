<archimate:ApplicationComponent
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Bitácora Arquitectura"
    id="id-4cc567b318fd4f2e92fe78b7064b7c18"
    documentation="Title: The title always starts with the date in YYYY-MM-DD format as long with a concise description of what the ADR is about. And finding a good description is not always that easy — As we all know, naming things is one of the two hard things in computer science, so take your time and put some thought into it. Your future you will thank you later. The date format is chosen so alphabetical ordering is also correct date ordering.&#xA;Participants: This is simply a list of people who took part in this discussion. This is useful because it helps to clear up questions such as “but did you ask an app developer?” or “was product management involved in this decision?”. Two days later you might remember. Two months later probably not.&#xA;Status: We have four different states in which an ADR can be:&#xA;- Open: It has been recorded as a problem, information might still be missing and discussion has not yet begun.&#xA;- In Progress: The discussion is currently going on.&#xA;- RFC: All necessary information has been gathered, a proposed decision has been made and now everyone can comment on it (“Request for Comments”).&#xA;- Decided: This is the final state — When a decision has been made and recorded and everyone had their fair chance of providing feedback. After that the ADR is closed. It is considered bad practice to modify ADRs later. However, what I do from time to time is to append to ADRs if new information becomes available.&#xA;Situation: Here we describe the current situation using only facts. What are we doing? What is the context of this decision? What are the premises and assumptions for this decision to hold? If necessary, also mention what explicitly is not in scope. Be very careful to not talk about problems or solutions in this section, they will be covered separately.&#xA;Problem: What is the problem that arises out of this context which we now need to solve and where an architectural decision is needed? What makes the problem complicated? What are the consequences? This exercise will help you to formulate the actual problem for your users and avoid that the technical solution dictates your problem.&#xA;Options: For each option we briefly describe the proposed solution, its implications, pros &amp; cons. I also always add a “Do nothing” option. This helps to point out the consequences that happen if you keep everything as it is. You might find out that it could be acceptable to do nothing, or it could help you to point out to management why a problem needs immediate attention. I also always explicitly add options that we obviously won’t do. Just adding them as an option to the ADRs doesn’t mean that we are considering doing it. But it helps to document that you have considered all the options and you deliberately choose not to pick it. It also helps to answer “Hey, why didn’t we use xyz” later.&#xA;Decision: Which option has ultimately been chosen? If a final decision has been made, we mark it also as the chosen option in the “options” section. A decision can also be that it’s up to the tribe to pick between different options (i.e., we don’t see negative consequences by picking one or the other or that different tribes pick different solutions).&#xA;Next steps: Until the ADR reached status “Decided, we ensure the ADR records who needs to do what next (e.g. Alice will research whether using FooService provides a Bar endpoint). As it is good practice with every action item, we assign a name and a date to it.&#xA;Timeline: A simple log that holds an entry for each status transition and (significant) amendment to the document. We also announce here when the RFC will end.&#xA;See also: Links to related decisions, confluence and web pages, slack discussion threads, etc.."/>
